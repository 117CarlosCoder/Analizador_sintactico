/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.ipc2.analizador.UI;

import com.ipc2.analizador.Lexico.Lexico;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoAritmetico;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoAsignacion;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoComentario;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoComparacion;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoConstante;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoEspacio;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoIdentificador;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoLogico;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoOtro;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoPalabraRes;
import com.ipc2.analizador.Lexico.Token.Token;
import com.ipc2.analizador.UI.Paneles.Generador;
import com.ipc2.analizador.UI.Paneles.Reportes;
import java.awt.Color;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author carlos117
 */
public class Inicio extends javax.swing.JFrame {
    
    private final JFrame frame;
    private final Generador generador;
    private final Reportes reporte;
    private String text;
    private Lexico lexico;
    private final NumeroLinea numeroLinea;
    private final NumeroLinea numeroLinea2;
    public static HashMap<Object,Object> mapTokens;
    public static List<List<Object>> infoTabla = new ArrayList<>();
    public static List<List<Object>> tablaToken = new ArrayList<>();
    public static  List<Object> newList = new ArrayList<>();
    public static List<List<Object>> newListOfLists = new ArrayList<>();
    
    /**
     * Creates new form Inicio
     */
    public Inicio() {
        initComponents();
        numeroLinea = new NumeroLinea(jTextPane1);
        jScrollPane3.setRowHeaderView(numeroLinea);
        numeroLinea2 = new NumeroLinea(jTextArea2);
        jScrollPane2.setRowHeaderView(numeroLinea2);
        mapTokens = new HashMap<>();
        frame = this;
        reporte = new Reportes();
        generador = new Generador();
        int panelMaxWidth = 600; 
        int panelMaxHeight = 700; 
        jPanel1.setMaximumSize(new Dimension(panelMaxWidth, panelMaxHeight));

                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        jButton1.setText("Escanear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jTextPane1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextPane1KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTextPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, "card2");

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Cargar Archivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Inicio");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Generador Grafico");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Reportes");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        jMenu4.setText("Ayuda");
        jMenuBar1.add(jMenu4);

        jMenu5.setText("Acerca de");
        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        mapTokens.clear();
        infoTabla.clear();
        text = jTextPane1.getText();
        String textFinal = "";
        System.out.println(text);
        
        lexico = new Lexico(text);
        int i = 0;
        int fila = 0;
        String tipo = "";
        String valor = "";
        Token token;
        do {
            token = lexico.nextToken();
            System.out.println(token.type + ": " + token.value);
            String tokenText = token.type + ": " + token.value;
            textFinal += tokenText + " fila : " + lexico.fila() + " columna : " + lexico.columna() + "\n";
            
            List<Object> valores = Arrays.asList(token.type,token.value);
            tablaToken.add(valores);
            
            if(token.type instanceof TipoAritmetico){
                tipo = "TipoAritmetico";
            }
            if(token.type instanceof TipoComentario){
                tipo = "TipoComentario";
            }
            if(token.type instanceof TipoAsignacion){
                tipo = "TipoAsignacion";
            }
            if(token.type instanceof TipoComparacion){
                tipo = "TipoComparacion";
            }
            if(token.type instanceof TipoConstante){
                tipo = "TipoConstante";
            }
            if(token.type instanceof TipoEspacio){
                tipo = "TipoEspacio";
            }
            if(token.type instanceof TipoIdentificador){
                tipo = "TipoIdentificador";
            }
            if(token.type instanceof TipoLogico){
                tipo = "TipoLogico";
            }
            if(token.type instanceof TipoOtro){
                tipo = "TipoOtro";
            }
            if(token.type instanceof TipoPalabraRes){
                tipo = "TipoPalabraRes";
            }
                
            List<Object> tabla = Arrays.asList(tipo,token.type.toString().toLowerCase(),token.value, lexico.fila(),lexico.columna());
            infoTabla.add(tabla);
            //infoTabla.add.(token.type,token.value,token.value, lexico.fila(),lexico.columna());
            
            System.out.println("Valor de matriz : " + tabla);
            
            
            fila++;
           
                        

            if (mapTokens.containsKey(token.type)) {
                //valor += mapTokens.get(token.type) + token.value;
                valor = token.value;
                
                if(token.type instanceof TipoConstante || token.type instanceof TipoComentario){
                    valor = mapTokens.get(token.type).toString() + "," + valor;
                    mapTokens.put(token.type, valor);
                    
                    
                    System.out.println("es instancia de numero " + valor + " fila : " + lexico.fila() + " columna : " + lexico.columna());
                }
                if(mapTokens.get(token.type).toString().contains(token.value) && !(token.type instanceof TipoConstante)){
                    valor =  mapTokens.get(token.type).toString() + valor;
                    mapTokens.put(token.type, valor);
                    System.out.println("Cadena de valores " + valor);
                }
                
                valor = "";
                
            }
            else{
                mapTokens.put(token.type, token.value);
            }
            
            System.out.println("hashmap tokens : " + mapTokens);
            
            
        } while (token.type != TipoEspacio.EOF);  
        mapTokens.put(token, i++);
  
        for (List<Object> tabla : infoTabla) {
        for (Object field : tabla) {
        System.out.print(field + " ");
        }
        System.out.println();
        }
        
        for (List<Object> tabla : tablaToken) {
            System.out.println(tabla.get(0));
            System.out.println(tabla.get(1));
        }  
        
        System.out.println();
         
        dividirInstacias();
        
        
       
       
        System.out.println("tablaToken : " + tablaToken);
        System.out.println("tablaLsitadelistas : " + newListOfLists);
        
        colorPalabras();
         
        
        jTextArea2.setText(textFinal);
        
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        jMenuItem1.setVisible(false);
        getContentPane().removeAll(); 
        getContentPane().add(generador);
        revalidate();  
        repaint();
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        generador.reset();
        jMenuItem1.setVisible(true);
        getContentPane().removeAll(); 
        getContentPane().add(jPanel1);
        revalidate();  
        repaint();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try{
        
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(frame);

                if (result == JFileChooser.APPROVE_OPTION) {
                    File file = fileChooser.getSelectedFile();
                    System.out.println("Archivo: " + file.getName());
                    
                    BufferedReader reader = new BufferedReader(new FileReader(file));

       
                    StringBuilder stringBuilder = new StringBuilder();

                    String line = null;
                    while ((line = reader.readLine()) != null) {
                        stringBuilder.append(line);
                        stringBuilder.append("\n");
                    }

                    reader.close();

                    text= stringBuilder.toString();

                    System.out.println(text);
                    jTextPane1.setText(text);
                    
                }
        }
        catch(Exception e){
            System.out.println("Eroorrrrrrr : " + e);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        jMenuItem1.setVisible(false);
        getContentPane().removeAll(); 
        //reporte.removeAll();
        reporte.insertarInfo(infoTabla);
        getContentPane().add(reporte);
        //infoTabla.clear();
        revalidate();  
        repaint();
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jTextPane1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextPane1KeyPressed
        /*StyledDocument doc = jTextPane1.getStyledDocument();
        SwingUtilities.invokeLater(() -> {
                        String text = jTextPane1.getText();
                        Style style = jTextPane1.addStyle("MyStyle", null);
                        StyleConstants.setForeground(style, Color.BLUE);

                        // Remover estilos anteriores
                        doc.setCharacterAttributes(0, text.length(), jTextPane1.getStyle("default"), true);

                        int startIndex = 0;
                        
                        while ((startIndex = text.indexOf("carlos", startIndex)) >= 0) {
                            doc.setCharacterAttributes(startIndex, "carlos".length(), style, false);
                            startIndex += "carlos".length();
                        }
                    });*/
               
    }//GEN-LAST:event_jTextPane1KeyPressed
    
    public static HashMap todoToken (){
          return mapTokens;
    }
    
    public static List<List<Object>> infoT (){
          return infoTabla;
    }
    
    public void dividirInstacias(){
                
        for (List<Object> list : tablaToken){
            for(Object value : list){
                if(value instanceof TipoIdentificador ){
                        for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                            if (!newList.contains(value2)) {
                                newList.add(value2);
                                System.out.println("tabla: " + newList);
                                if (j == 1) {
                                  List<Object> valores = Arrays.asList(list.get(0),list.get(1));
                                  newListOfLists.add(valores);
                                  System.out.println("tablaLsitadelistas : " + newListOfLists);

                                }

                            }

                    }                   
                }
                
            }
        }
        for(List<Object> list : tablaToken){
        for(Object value : list){
                if(value instanceof TipoAritmetico ){
                        for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                            if (!newList.contains(value2)) {
                                newList.add(value2);
                                System.out.println("tabla: " + newList);
                                if (j == 1) {
                                  List<Object> valores = Arrays.asList(list.get(0),list.get(1));
                                  newListOfLists.add(valores);
                                  System.out.println("tablaLsitadelistas : " + newListOfLists);

                                }

                            }

                        }


                    
                }
                
        }}
        for(List<Object> list : tablaToken){
        for(Object value : list){
                if(value instanceof TipoAsignacion ){
                   
                        for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                            if (!newList.contains(value2)) {
                                newList.add(value2);
                                System.out.println("tabla: " + newList);
                                if (j == 1) {
                                  List<Object> valores = Arrays.asList(list.get(0),list.get(1));
                                  newListOfLists.add(valores);
                                  System.out.println("tablaLsitadelistas : " + newListOfLists);

                                }

                            }

                        }


                    
                }
                
        }
        }
        for(List<Object> list : tablaToken){
        for(Object value : list){
                if(value instanceof TipoComparacion ){
                        for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                            if (!newList.contains(value2)) {
                                newList.add(value2);
                                System.out.println("tabla: " + newList);
                                if (j == 1) {
                                  List<Object> valores = Arrays.asList(list.get(0),list.get(1));
                                  newListOfLists.add(valores);
                                  System.out.println("tablaLsitadelistas : " + newListOfLists);

                                }

                            }

                        }


                    
                }
                
        }
        }
        
        for(List<Object> list : tablaToken){
        for(Object value : list){
                if(value instanceof TipoEspacio ){
                        for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                            if (!newList.contains(value2)) {
                                newList.add(value2);
                                System.out.println("tabla: " + newList);
                                if (j == 1) {
                                  List<Object> valores = Arrays.asList(list.get(0),list.get(1));
                                  newListOfLists.add(valores);
                                  System.out.println("tablaLsitadelistas : " + newListOfLists);

                                }

                            }

                        }


                    
                }
                
        }}
        for(List<Object> list : tablaToken){
        for(Object value : list){
                if(value instanceof TipoLogico ){
                        for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                            if (!newList.contains(value2)) {
                                newList.add(value2);
                                System.out.println("tabla: " + newList);
                                if (j == 1) {
                                  List<Object> valores = Arrays.asList(list.get(0),list.get(1));
                                  newListOfLists.add(valores);
                                  System.out.println("tablaLsitadelistas : " + newListOfLists);

                                }

                            }

                        }


                    
                }
                
        }}
        for(List<Object> list : tablaToken){
        for(Object value : list){
                if(value instanceof TipoOtro ){
                        for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                            if (!newList.contains(value2)) {
                                newList.add(value2);
                                System.out.println("tabla: " + newList);
                                if (j == 1) {
                                  List<Object> valores = Arrays.asList(list.get(0),list.get(1));
                                  newListOfLists.add(valores);
                                  System.out.println("tablaLsitadelistas : " + newListOfLists);

                                }

                            }

                        }


                    
                }
                
        }}
        
        
        for(List<Object> list : tablaToken){
            for(Object value : list){
                if(value instanceof TipoPalabraRes ){
                
                        for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                            if (!newList.contains(value2)) {
                                newList.add(value2);
                                System.out.println("tabla: " + newList);
                                if (j == 1) {
                                  List<Object> valores = Arrays.asList(list.get(0),list.get(1));
                                  newListOfLists.add(valores);
                                  System.out.println("tablaLsitadelistas : " + newListOfLists);

                                }

                            }

                        }


                    
                }
                
        }
        }

        
        for(List<Object> list : tablaToken){
        for(Object value : list){
                if(value instanceof TipoConstante ){
                        for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                            if (!newList.contains(value2)) {
                                newList.add(value2);
                                System.out.println("tabla: " + newList);
                                if (j == 1) {
                                  List<Object> valores = Arrays.asList(list.get(0),list.get(1));
                                  newListOfLists.add(valores);
                                  System.out.println("tablaLsitadelistas : " + newListOfLists);

                                }

                            }

                        }


                    
                }
                
        }}
        for(List<Object> list : tablaToken){
        for(Object value : list){
                if(value instanceof TipoComentario ){
                        for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                            if (!newList.contains(value2)) {
                                newList.add(value2);
                                System.out.println("tabla: " + newList);
                                if (j == 1) {
                                  List<Object> valores = Arrays.asList(list.get(0),list.get(1));
                                  newListOfLists.add(valores);
                                  System.out.println("tablaLsitadelistas : " + newListOfLists);

                                }

                            }

                        }


                    
                }
                
        }}
        System.out.println("");
        System.out.println("Valor de lista Final = " + newListOfLists);
        System.out.println("");
    }
    
    public void colorPalabras() {
    StyledDocument doc = jTextPane1.getStyledDocument();
    
    String text1 = jTextPane1.getText();
    
    

    SwingUtilities.invokeLater(() -> {
    // Limpia los atributos de estilo del documento
    doc.setCharacterAttributes(0, text1.length(), jTextPane1.getStyle("default"), true);

    for (List<Object> tabla : newListOfLists){
        
            Color color = Color.DARK_GRAY;
            String tokenValue = tabla.get(1).toString();
            int index = text1.indexOf(tokenValue);
            
            Style style = jTextPane1.addStyle("MyStyle", null);
            int startIndex = 0 ;
            
            if (tabla.get(0) instanceof TipoIdentificador) {
                color = Color.BLACK;
                 while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                    StyleConstants.setForeground(style, color);
                    doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                    startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                    System.out.println("Repetir");
                }
            }
            if (tabla.get(0) instanceof TipoPalabraRes) {
                color = new Color(128, 0, 128);;
                while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                    StyleConstants.setForeground(style, color);
                    doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                    startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                    System.out.println("Repetir");
                }
                
            }
            if (tabla.get(0) instanceof TipoAritmetico || tabla.get(0) instanceof TipoComparacion || tabla.get(0) instanceof TipoLogico || tabla.get(0) instanceof TipoAsignacion) {
                color = new Color(0, 191, 255);
                while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                    StyleConstants.setForeground(style, color);
                    doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                    startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                    System.out.println("Repetir");
                }
            }  
            if (tabla.get(0) instanceof TipoOtro) {
                color = Color.GREEN;
                 while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                    StyleConstants.setForeground(style, color);
                    doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                    startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                    System.out.println("Repetir");
                }
            }
            if (tabla.get(0) instanceof TipoConstante) {
                color = Color.RED;
                while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                    StyleConstants.setForeground(style, color);
                    doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                    startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                    System.out.println("Repetir");
                }
            }
            if (tabla.get(0) instanceof TipoComentario) {
                color = Color.GRAY;
                while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                    StyleConstants.setForeground(style, color);
                    doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                    startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                    System.out.println("Repetir");
                }
            } 
            
            


            
            System.out.println("Valor de token en colores : " + tokenValue + " llave : " + tabla.get(0) );
            System.out.println();
            
            
       
                
                
             
            
        }
    
    });
        
    
    }

    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
