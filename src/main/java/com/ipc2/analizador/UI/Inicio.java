/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.ipc2.analizador.UI;

import com.ipc2.analizador.Lexico.LexicoPrueba;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoAritmetico;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoAsignacion;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoComentario;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoComparacion;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoConstante;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoEspacio;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoIdentificador;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoLogico;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoOtro;
import com.ipc2.analizador.Lexico.Token.TipoTokens.TipoPalabraRes;
import com.ipc2.analizador.Lexico.Token.TokenPrueba;
import com.ipc2.analizador.Sintactico.PDA_1;
import com.ipc2.analizador.Sintactico.ReglasProduccion.Identificador;
import com.ipc2.analizador.Sintactico.Sintactico;
import com.ipc2.analizador.UI.Paneles.Generador;
import com.ipc2.analizador.UI.Paneles.Reportes;
import com.ipc2.analizador.UI.Paneles.ReportesSintactico;
import java.awt.Color;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author carlos117
 */
public class Inicio extends javax.swing.JFrame {

    private final JFrame frame;
    private final Generador generador;
    private final Reportes reporte;
    private final ReportesSintactico reportesSintactico;
    private String text;
    private LexicoPrueba lexico;
    private Sintactico sintactico;
    private PDA_1 sintacticoPDa;
    private final NumeroLinea numeroLinea;
    private final NumeroLinea numeroLinea2;
    private final NumeroLinea numeroLinea3;
    public static HashMap<Object, Object> mapTokens;
    public static List<List<Object>> infoTabla = new ArrayList<>();
    public static List<List<Object>> SintacticoTabla = new ArrayList<>();
    public static List<List<Object>> tablaToken = new ArrayList<>();
    public static List<Object> newList = new ArrayList<>();
    public static List<List<Object>> newListOfLists = new ArrayList<>();

    /**
     * Creates new form Inicio
     */
    public Inicio() {
        initComponents();
        numeroLinea = new NumeroLinea(jTextPane1);
        jScrollPane3.setRowHeaderView(numeroLinea);
        numeroLinea2 = new NumeroLinea(jTextArea2);
        numeroLinea3 = new NumeroLinea(jTextArea1);
        jScrollPane1.setRowHeaderView(numeroLinea3);
        jScrollPane2.setRowHeaderView(numeroLinea2);
        mapTokens = new HashMap<>();
        frame = this;
        reporte = new Reportes();
        reportesSintactico = new ReportesSintactico();
        generador = new Generador();
        sintacticoPDa = new PDA_1();
        sintactico = new Sintactico();
        int panelMaxWidth = 600;
        int panelMaxHeight = 700;
        jPanel1.setMaximumSize(new Dimension(panelMaxWidth, panelMaxHeight));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        jButton1.setText("Escanear");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jTextPane1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextPane1KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTextPane1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Borrar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(45, 45, 45)
                        .addComponent(jButton2))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jScrollPane1))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 852, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, "card2");

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Cargar Archivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Inicio");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Generador Grafico");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Reportes Lexico");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        jMenu6.setText("Reportes Sintactico");
        jMenu6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu6MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu6);

        jMenu4.setText("Ayuda");
        jMenuBar1.add(jMenu4);

        jMenu5.setText("Acerca de");
        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        mapTokens.clear();
        infoTabla.clear();
        text = jTextPane1.getText();
        String textFinal = "";
        String valorSintactico = "";
        System.out.println(text);

        lexico = new LexicoPrueba(text);
        SintacticoTabla = sintactico.valorSintactico(text);
        LexicoPrueba lexicocolor = new LexicoPrueba(text);
        //int i = 0;
        //int fila = 0;
        //String tipo = "";
        //String valor = "";
        TokenPrueba token;
        

        do {
            token = lexico.nextToken();
            if(token.type != TipoEspacio.SPACE){
            System.out.println("El token en totalidad : " + token);
            System.out.println(token.type + ": " + token.value);
            String tokenText = token.type + ": " + token.value;
            mapTokens.put(token.type, token.value);
            System.out.println("Hashmap Tokens valro de inicio: " + mapTokens);
            textFinal += tokenText + " fila : " + token.fila + " columna : " + token.columna + "\n";
            
            List<Object> valores = Arrays.asList(token.type, token.value);
            tablaToken.add(valores);
            List<Object> tabla = Arrays.asList(token.type, token.type.toString().toLowerCase(), token.value, token.fila, token.columna);
            infoTabla.add(tabla);
            }
        } while (token.type != TipoEspacio.EOF);

        //sintactico = new Sintactico(tablaToken);
        //sintactico.valorSintactico();
        
        for (List<Object> list : SintacticoTabla) {
            
            int valortam = list.size()-1;
           
            System.out.println("listaaa : " + list );
            System.out.println("listaaa : " + list.size() );
            
            if (list.get(1) == Identificador.EXPRESION ){
                System.out.println("Entrando a Expresion");
                List <Object> lista = (List <Object>) list.get(0);
                System.out.println(list.get(valortam-1));
                System.out.println(list.get(valortam));
                System.out.println(lista.get(0));
                System.out.println(((List<Object>)lista.get(0)).get(2));
                System.out.println(((List<Object>)lista.get(0)).get(3));
                valorSintactico += " "+ list.get(valortam-1) + "\n Bloque : " + list.get(valortam) + "\n Fila : "+ ((List<Object>)lista.get(0)).get(2) + " Columna : "+ ((List<Object>)lista.get(0)).get(3) + "\n";
            }
            else{
                valorSintactico += list.get(0).toString() + " : "+ list.get(1) +"  Fila : "+ list.get(2) +"  Columna : " + list.get(valortam) + "\n";
            }
        }
        
        do {
            
            token = lexicocolor.nextToken();
            colorPalabrasprueba(token);

        } while (token.type != TipoEspacio.EOF);

        for (List<Object> tabla : infoTabla) {
            for (Object field : tabla) {
                System.out.print(field + " ");
            }
            System.out.println();
        }

        for (List<Object> tabla : tablaToken) {
            System.out.println(tabla.get(0));
            System.out.println(tabla.get(1));
        }

        System.out.println();

        dividirInstacias();

        System.out.println("tablaToken : " + tablaToken);
        System.out.println("tablaLsitadelistas : " + newListOfLists);

        colorPalabras();
        

        jTextArea2.setText(textFinal);
        jTextArea1.setText(valorSintactico);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed


    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        jMenuItem1.setVisible(false);
        getContentPane().removeAll();
        getContentPane().add(generador);
        revalidate();
        repaint();
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        generador.reset();
        jMenuItem1.setVisible(true);
        getContentPane().removeAll();
        getContentPane().add(jPanel1);
        revalidate();
        repaint();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {

            JFileChooser fileChooser = new JFileChooser();
            int result = fileChooser.showOpenDialog(frame);

            if (result == JFileChooser.APPROVE_OPTION) {

                File file = fileChooser.getSelectedFile();

                System.out.println("Archivo: " + file.getName());

                BufferedReader reader = new BufferedReader(new FileReader(file));

                StringBuilder stringBuilder = new StringBuilder();

                String line = null;

                while ((line = reader.readLine()) != null) {
                    stringBuilder.append(line);
                    stringBuilder.append("\n");
                }

                reader.close();

                text = stringBuilder.toString();

                System.out.println(text);
                jTextPane1.setText(text);

            }
        } catch (Exception e) {
            System.out.println("Eroorrrrrrr : " + e);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        jMenuItem1.setVisible(false);
        getContentPane().removeAll();
        //reporte.removeAll();
        reporte.insertarInfo(infoTabla);
        getContentPane().add(reporte);
        //infoTabla.clear();
        revalidate();
        repaint();
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jTextPane1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextPane1KeyPressed
        /*StyledDocument doc = jTextPane1.getStyledDocument();
        SwingUtilities.invokeLater(() -> {
                        String text = jTextPane1.getText();
                        Style style = jTextPane1.addStyle("MyStyle", null);
                        StyleConstants.setForeground(style, Color.BLUE);

                        // Remover estilos anteriores
                        doc.setCharacterAttributes(0, text.length(), jTextPane1.getStyle("default"), true);

                        int startIndex = 0;
                        
                        while ((startIndex = text.indexOf("carlos", startIndex)) >= 0) {
                            doc.setCharacterAttributes(startIndex, "carlos".length(), style, false);
                            startIndex += "carlos".length();
                        }
                    });*/

    }//GEN-LAST:event_jTextPane1KeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jTextPane1.setText("");
        jTextArea1.setText("");
        jTextArea2.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenu6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu6MouseClicked
        jMenuItem1.setVisible(false);
        getContentPane().removeAll();
        //reporte.removeAll();
        List<List<Object>> listainterna = new ArrayList<>();
        System.out.println(text);
        if (text != null) {
            listainterna = sintacticoPDa.validarTok(text);
            reportesSintactico.insertarInfo(listainterna);
        }
        else{
            reportesSintactico.insertarInfo(listainterna);
        }
        
        
        getContentPane().add(reportesSintactico);
        //infoTabla.clear();
        revalidate();
        repaint();
    }//GEN-LAST:event_jMenu6MouseClicked

    public static HashMap todoToken() {
        return mapTokens;
    }

    public static List<List<Object>> infoT() {
        return infoTabla;
    }

    public void dividirInstacias() {

        for (List<Object> list : tablaToken) {
            for (Object value : list) {
                if (value instanceof TipoIdentificador) {
                    for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                        if (!newList.contains(value2)) {
                            newList.add(value2);
                            System.out.println("tabla: " + newList);
                            if (j == 1) {
                                List<Object> valores = Arrays.asList(list.get(0), list.get(1));
                                newListOfLists.add(valores);
                                System.out.println("tablaLsitadelistas : " + newListOfLists);

                            }

                        }

                    }
                }

            }
        }
        for (List<Object> list : tablaToken) {
            for (Object value : list) {
                if (value instanceof TipoAritmetico) {
                    for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                        if (!newList.contains(value2)) {
                            newList.add(value2);
                            System.out.println("tabla: " + newList);
                            if (j == 1) {
                                List<Object> valores = Arrays.asList(list.get(0), list.get(1));
                                newListOfLists.add(valores);
                                System.out.println("tablaLsitadelistas : " + newListOfLists);

                            }

                        }

                    }

                }

            }
        }
        for (List<Object> list : tablaToken) {
            for (Object value : list) {
                if (value instanceof TipoAsignacion) {

                    for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                        if (!newList.contains(value2)) {
                            newList.add(value2);
                            System.out.println("tabla: " + newList);
                            if (j == 1) {
                                List<Object> valores = Arrays.asList(list.get(0), list.get(1));
                                newListOfLists.add(valores);
                                System.out.println("tablaLsitadelistas : " + newListOfLists);

                            }

                        }

                    }

                }

            }
        }
        for (List<Object> list : tablaToken) {
            for (Object value : list) {
                if (value instanceof TipoComparacion) {
                    for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                        if (!newList.contains(value2)) {
                            newList.add(value2);
                            System.out.println("tabla: " + newList);
                            if (j == 1) {
                                List<Object> valores = Arrays.asList(list.get(0), list.get(1));
                                newListOfLists.add(valores);
                                System.out.println("tablaLsitadelistas : " + newListOfLists);

                            }

                        }

                    }

                }

            }
        }

        for (List<Object> list : tablaToken) {
            for (Object value : list) {
                if (value instanceof TipoEspacio) {
                    for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                        if (!newList.contains(value2)) {
                            newList.add(value2);
                            System.out.println("tabla: " + newList);
                            if (j == 1) {
                                List<Object> valores = Arrays.asList(list.get(0), list.get(1));
                                newListOfLists.add(valores);
                                System.out.println("tablaLsitadelistas : " + newListOfLists);

                            }

                        }

                    }

                }

            }
        }
        for (List<Object> list : tablaToken) {
            for (Object value : list) {
                if (value instanceof TipoLogico) {
                    for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                        if (!newList.contains(value2)) {
                            newList.add(value2);
                            System.out.println("tabla: " + newList);
                            if (j == 1) {
                                List<Object> valores = Arrays.asList(list.get(0), list.get(1));
                                newListOfLists.add(valores);
                                System.out.println("tablaLsitadelistas : " + newListOfLists);

                            }

                        }

                    }

                }

            }
        }
        for (List<Object> list : tablaToken) {
            for (Object value : list) {
                if (value instanceof TipoOtro) {
                    for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                        if (!newList.contains(value2)) {
                            newList.add(value2);
                            System.out.println("tabla: " + newList);
                            if (j == 1) {
                                List<Object> valores = Arrays.asList(list.get(0), list.get(1));
                                newListOfLists.add(valores);
                                System.out.println("tablaLsitadelistas : " + newListOfLists);

                            }

                        }

                    }

                }

            }
        }

        for (List<Object> list : tablaToken) {
            for (Object value : list) {
                if (value instanceof TipoPalabraRes) {

                    for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                        if (!newList.contains(value2)) {
                            newList.add(value2);
                            System.out.println("tabla: " + newList);
                            if (j == 1) {
                                List<Object> valores = Arrays.asList(list.get(0), list.get(1));
                                newListOfLists.add(valores);
                                System.out.println("tablaLsitadelistas : " + newListOfLists);

                            }

                        }

                    }

                }

            }
        }

        for (List<Object> list : tablaToken) {
            for (Object value : list) {
                if (value instanceof TipoConstante) {
                    for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                        if (!newList.contains(value2)) {
                            newList.add(value2);
                            System.out.println("tabla: " + newList);
                            if (j == 1) {
                                List<Object> valores = Arrays.asList(list.get(0), list.get(1));
                                newListOfLists.add(valores);
                                System.out.println("tablaLsitadelistas : " + newListOfLists);

                            }

                        }

                    }

                }

            }
        }
        for (List<Object> list : tablaToken) {
            for (Object value : list) {
                if (value instanceof TipoComentario) {
                    for (int j = 0; j < 2; j++) {
                        Object value2 = list.get(j);
                        if (!newList.contains(value2)) {
                            newList.add(value2);
                            System.out.println("tabla: " + newList);
                            if (j == 1) {
                                List<Object> valores = Arrays.asList(list.get(0), list.get(1));
                                newListOfLists.add(valores);
                                System.out.println("tablaLsitadelistas : " + newListOfLists);

                            }

                        }

                    }

                }

            }
        }
        System.out.println("");
        System.out.println("Valor de lista Final = " + newListOfLists);
        System.out.println("");
    }

    public void colorPalabrasprueba(TokenPrueba token) {
        StyledDocument doc = jTextPane1.getStyledDocument();

        String text1 = jTextPane1.getText();

        SwingUtilities.invokeLater(() -> {
            // Limpia los atributos de estilo del documento
            doc.setCharacterAttributes(0, text1.length(), jTextPane1.getStyle("default"), true);

            Color color = Color.DARK_GRAY;
            String tokenValue = token.value;
            int index = text1.indexOf(tokenValue);

            Style style = jTextPane1.addStyle("MyStyle", null);
            int startIndex = 0;

            if (token.type instanceof TipoIdentificador) {
                color = Color.BLACK;
                while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                    StyleConstants.setForeground(style, color);
                    doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                    startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                    System.out.println("Repetir");
                }
            }
            if (token.type instanceof TipoPalabraRes) {
                color = new Color(128, 0, 128);;
                while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                    StyleConstants.setForeground(style, color);
                    doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                    startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                    System.out.println("Repetir");
                }

            }
            if (token.type instanceof TipoAritmetico || token.type instanceof TipoComparacion || token.type instanceof TipoLogico || token.type instanceof TipoAsignacion) {
                color = new Color(0, 191, 255);
                while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                    StyleConstants.setForeground(style, color);
                    doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                    startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                    System.out.println("Repetir");
                }
            }
            if (token.type instanceof TipoOtro) {
                color = Color.GREEN;
                while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                    StyleConstants.setForeground(style, color);
                    doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                    startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                    System.out.println("Repetir");
                }
            }
            if (token.type instanceof TipoConstante) {
                color = Color.RED;
                while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                    StyleConstants.setForeground(style, color);
                    doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                    startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                    System.out.println("Repetir");
                }
            }
            if (token.type instanceof TipoComentario) {
                color = Color.GRAY;
                while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                    StyleConstants.setForeground(style, color);
                    doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                    startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                    System.out.println("Repetir");
                }
            }

            System.out.println("index :" + index);

        });

    }

    public void colorPalabras() {
        StyledDocument doc = jTextPane1.getStyledDocument();

        String text1 = jTextPane1.getText();

        SwingUtilities.invokeLater(() -> {
            // Limpia los atributos de estilo del documento
            doc.setCharacterAttributes(0, text1.length(), jTextPane1.getStyle("default"), true);

            for (List<Object> tabla : newListOfLists) {

                Color color = Color.DARK_GRAY;
                String tokenValue = tabla.get(1).toString();
                int index = text1.indexOf(tokenValue);

                Style style = jTextPane1.addStyle("MyStyle", null);
                int startIndex = 0;

                if (tabla.get(0) instanceof TipoIdentificador) {
                    color = Color.BLACK;
                    while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                        StyleConstants.setForeground(style, color);
                        doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                        startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                        System.out.println("Repetir");
                    }
                }
                if (tabla.get(0) instanceof TipoPalabraRes) {
                    color = new Color(128, 0, 128);;
                    while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                        StyleConstants.setForeground(style, color);
                        doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                        startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                        System.out.println("Repetir");
                    }

                }
                if (tabla.get(0) instanceof TipoAritmetico || tabla.get(0) instanceof TipoComparacion || tabla.get(0) instanceof TipoLogico || tabla.get(0) instanceof TipoAsignacion) {
                    color = new Color(0, 191, 255);
                    while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                        StyleConstants.setForeground(style, color);
                        doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                        startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                        System.out.println("Repetir");
                    }
                }
                if (tabla.get(0) instanceof TipoOtro) {
                    color = Color.GREEN;
                    while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                        StyleConstants.setForeground(style, color);
                        doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                        startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                        System.out.println("Repetir");
                    }
                }
                if (tabla.get(0) instanceof TipoConstante) {
                    color = Color.RED;
                    while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                        StyleConstants.setForeground(style, color);
                        doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                        startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                        System.out.println("Repetir");
                    }
                }
                if (tabla.get(0) instanceof TipoComentario) {
                    color = Color.GRAY;
                    while ((startIndex = text1.indexOf(tokenValue, startIndex)) >= 0) {

                        StyleConstants.setForeground(style, color);
                        doc.setCharacterAttributes(startIndex, tokenValue.length(), style, false);
                        startIndex += tokenValue.length(); // Incrementa startIndex con la longitud del tokenValue
                        System.out.println("Repetir");
                    }
                }

                System.out.println("Valor de token en colores : " + tokenValue + " llave : " + tabla.get(0));
                System.out.println();

            }

        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
